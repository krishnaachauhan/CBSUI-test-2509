import { GridMetaDataType } from "@acuteinfo/common-base";

export const RetrieveParaGridMetaData: GridMetaDataType = {
  gridConfig: {
    dense: true,
    gridLabel: "Prameters List",
    rowIdColumn: "accessor",
    defaultColumnConfig: {
      width: 400,
      maxWidth: 450,
      minWidth: 300,
    },
    allowColumnReordering: true,
    disableSorting: false,
    hideHeader: false,
    disableGroupBy: true,
    enablePagination: true,
    pageSizes: [10, 20, 30],
    defaultPageSize: 10,
    containerHeight: {
      min: "40vh",
      max: "50vh",
    },
    allowFilter: false,
    allowColumnHiding: false,
    allowRowSelection: false,
    isCusrsorFocused: true,
    hiddenFlag: "_hidden",
  },
  filters: [
    // {
    //   accessor: "SR_CD",
    //   columnName: "SrNo",
    //   filterComponentType: "valueFilter",
    //   gridProps: {
    //     xs: 12,
    //     md: 12,
    //     sm: 12,
    //   },
    // },
  ],
  columns: [
    {
      accessor: "SR_CD",
      columnName: "SrNo",
      sequence: 1,
      alignment: "left",
      componentType: "default",
      width: 80,
      minWidth: 80,
      maxWidth: 120,
      isAutoSequence: true,
    },
    {
      accessor: "accessor",
      columnName: "ColumnAccessor",
      sequence: 2,
      componentType: "default",
      placeholder: "EnterColumnAccessor",
      width: 180,
      minWidth: 150,
      maxWidth: 250,
      required: true,
    },
    {
      accessor: "columnName",
      columnName: "ColumnName",
      sequence: 3,
      componentType: "editableTextField",
      placeholder: "EnterColumnName",
      width: 180,
      minWidth: 150,
      maxWidth: 250,
      required: true,
      // schemaValidation: {
      //   type: "string",
      //   rules: [{ name: "required", params: ["ThisFieldisrequired"] }],
      // },
    },
    {
      accessor: "sequence",
      columnName: "Sequence",
      sequence: 4,
      alignment: "center",
      componentType: "editableNumberFormat",
      placeholder: "EnterWhereSequence",
      width: 130,
      minWidth: 80,
      maxWidth: 150,
      FormatProps: {
        isAllowed: (values) => {
          if (values.floatValue === 0) {
            return false;
          }
          return true;
        },
      },
    },
    {
      accessor: "visibleInRetrieval",
      columnName: "VisibleInRetrieval",
      sequence: 4,
      componentType: "editableCheckbox",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "defaultValue",
      columnName: "DefaultValue",
      sequence: 4,
      componentType: "editableTextField",
      placeholder: "EnterDefaultValue",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
    },
    {
      accessor: "validationRun",
      columnName: "ValidationRun",
      sequence: 4,
      componentType: "editableAutocomplete",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
      required: true,
      options: [
        { label: "All", value: "all" },
        { label: "On-Change", value: "onChange" },
        { label: "onBlur", value: "onBlur" },
      ],
      _optionsKey: "validationRun",
      // validation: (value, data, prev, next, aaa) => {
      //   console.log(
      //     "<<<value, data, prev, next , aaa",
      //     value,
      //     data,
      //     prev,
      //     next,
      //     aaa
      //   );
      //   return "";
      // },
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["ThisFieldisrequired"] }],
      },
    },
    {
      accessor: "type",
      columnName: "ColumnType",
      sequence: 4,
      componentType: "editableSelect",
      placeholder: "0.00",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
      required: true,
      options: [
        { label: "numberFormat", value: "numberFormat" },
        { label: "checkbox", value: "checkbox" },
        { label: "datetimePicker", value: "datetimePicker" },
        { label: "timePicker", value: "timePicker" },
        { label: "select", value: "select" },
        { label: "textField", value: "textField" },
        { label: "datePicker", value: "datePicker" },
        { label: "amountField", value: "amountField" },
        { label: "textarea", value: "textarea" },
        { label: "hidden", value: "hidden" },
        { label: "autocomplete", value: "autocomplete" },
        { label: "divider", value: "divider" },
        { label: "typography", value: "typography" },
      ],
      _optionsKey: "type",
      schemaValidation: {
        type: "string",
        rules: [{ name: "required", params: ["ThisFieldisrequired"] }],
      },
    },
    {
      accessor: "options",
      columnName: "Options",
      sequence: 5,
      componentType: "editableTextField",
      placeholder: "EnterDefaultValue",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
    },

    {
      accessor: "placeholder",
      columnName: "Placeholder",
      sequence: 5,
      componentType: "editableTextField",
      placeholder: "Enter For Placeholder",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
    },
    {
      accessor: "dependentFields",
      columnName: "Dependent Fields",
      sequence: 5,
      componentType: "editableTextField",
      placeholder: "Enter For Placeholder",
      width: 150,
      minWidth: 120,
      maxWidth: 200,
    },
    {
      accessor: "required",
      columnName: "Required",
      sequence: 6,
      componentType: "editableCheckbox",
      defaultValue: "N",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "isReadOnly",
      columnName: "ReadOnly",
      sequence: 6,
      defaultValue: "N",
      componentType: "editableCheckbox",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "xs",
      columnName: "XS",
      sequence: 7,
      componentType: "editableNumberFormat",
      placeholder: "EnterColumnWidth",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "sm",
      columnName: "SM",
      sequence: 7,
      componentType: "editableNumberFormat",
      placeholder: "EnterColumnWidth",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "md",
      columnName: "MD",
      sequence: 7,
      componentType: "editableNumberFormat",
      placeholder: "EnterColumnWidth",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "lg",
      columnName: "LG",
      sequence: 7,
      componentType: "editableNumberFormat",
      placeholder: "EnterColumnWidth",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "xl",
      columnName: "XL",
      sequence: 7,
      componentType: "editableNumberFormat",
      placeholder: "EnterColumnWidth",
      width: 100,
      minWidth: 80,
      maxWidth: 120,
    },
    {
      accessor: "shouldExclude",
      columnName: "ShouldExclude",
      sequence: 7,
      componentType: "editableTextField",
      placeholder: "EnterforVisibleUnVisible",
      width: 120,
      minWidth: 180,
      maxWidth: 250,
    },
    {
      accessor: "schemaValidation",
      columnName: "SchemaValidation",
      sequence: 8,
      componentType: "editableTextField",
      placeholder: "EnterSchemaValidation",
      width: 120,
      minWidth: 180,
      maxWidth: 250,
    },
    {
      accessor: "setFieldLabel",
      columnName: "SetFieldLabel",
      sequence: 8,
      componentType: "editableTextField",
      placeholder: "EnterforchangesfieldLabel",
      width: 120,
      minWidth: 180,
      maxWidth: 250,
    },
    {
      accessor: "validate",
      columnName: "Validate",
      sequence: 8,
      componentType: "editableTextField",
      placeholder: "EnterValidateCondition",
      width: 120,
      minWidth: 180,
      maxWidth: 250,
    },

    // {
    //   accessor: "WHERE_SEQ_ID",
    //   columnName: "WhereSequence",
    //   sequence: 9,
    //   alignment: "right",
    //   componentType: "editableNumberFormat",
    //   placeholder: "EnterWhereSequence",
    //   width: 130,
    //   minWidth: 80,
    //   maxWidth: 150,
    //   className: "textInputFromRight",
    //   FormatProps: {
    //     isAllowed: (values) => {
    //       if (values?.value?.length > 5) {
    //         return false;
    //       }
    //       if (values.floatValue === 0) {
    //         return false;
    //       }
    //       return true;
    //     },
    //   },
    //   schemaValidation: {
    //     type: "string",
    //     rules: [{ name: "required", params: ["ThisFieldisrequired"] }],
    //   },
    // },
  ],
};
