//@ts-nocheck
const exportToPdf = ({
  title,
  columns,
  rows,
  columnsSelected,
  data,
  auth,
  retrievalParams,
  filters,
  globalFilter,
  columnLabel,
  banklogo,
  pageNumber,
  totalPageCount,
}) => {
  const pdfStyle = {
    DEFAULT: "#000",
    THEME: "#800000",
    SMALL_TEXT: 7,
    MEDIUM_TEXT: 18,
    DEFAULT_TEXT: 16,
    HEADING_TEXT: 14,
  };
  let startY = 5;
  // eslint-disable-next-line no-undef
  const doc: any = new jspdf.jsPDF({
    orientation: data.orientation,
    unit: "mm",
    format: data.page_size,
  });

  // get page width and height
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;

  // get filter date [from/to]
  const { fromDt, toDt } = getRetrievalParaDate(retrievalParams);

  // footer
  function footer() {
    doc.setFontSize(pdfStyle.SMALL_TEXT);
    doc.setTextColor(150);
    doc.setFont(undefined, "normal");
    doc.text(`Generated by- ${auth?.user?.id}`, 10, pageHeight - 10);
  }

  // reset
  function reset(color = pdfStyle.DEFAULT) {
    doc.setFontSize(pdfStyle.DEFAULT_TEXT);
    doc.setTextColor(color);
    doc.setFont(undefined, "normal");
  }

  // set report title
  let fileTitle = getTitleFilters(
    retrievalParams,
    filters,
    globalFilter,
    columnLabel
  );

  // columns
  columns = columns.filter((column: { id: number }) =>
    columnsSelected.includes(column.id)
  );

  const filteredRows = getDynamicRow(rows, columns);

  if (data.show_header) {
    doc.addImage(banklogo, "JPG", 10, startY, 40, 24);

    doc.setFontSize(pdfStyle.HEADING_TEXT);
    doc.setTextColor(pdfStyle.THEME);

    const companyName = auth?.companyName ?? "";
    // const titleAlignCenter = pageWidth / 2 - doc.getTextWidth(companyName) / 2;
    // doc.text(companyName, titleAlignCenter, startY + 14);

    const titleX = pageWidth / 2;
    const titleY = startY + 10;
    const splitTitle = doc.splitTextToSize(companyName, 60);
    doc.text(splitTitle, titleX, titleY, { align: "center" });

    /* branch code */
    // doc.setFontSize(9)
    // const branch = `Branch: ${auth?.user?.branchCode}- ${auth?.user?.branch}`
    // const subHeaderAlignCenter = (pageWidth / 2) - doc.getTextWidth(branch) / 2
    // doc.text(branch, subHeaderAlignCenter, startY + 20)

    startY += 20;
    reset();
  }

  // startY += 10
  // doc.text(title, 10, startY);
  doc.setFontSize(pdfStyle.SMALL_TEXT);
  doc.setTextColor(150);
  // eslint-disable-next-line no-undef
  doc.text(
    `printed on: ${dateFns.format(Date.now(), "DD/MM/YYYY HH:mm:ss")}`,
    pageWidth - 42,
    10
  );
  if (typeof pageNumber === "number") {
    doc.text(
      `page: ${pageNumber + 1} of ${totalPageCount}`,
      pageWidth - 42,
      13
    );
  }

  doc.setFontSize(8);
  doc.setTextColor(pdfStyle.DEFAULT);
  const fullTitle = `${title} ${fileTitle}`;
  if (fullTitle.length > pageWidth - 80) {
    const splitTitle = doc.splitTextToSize(fullTitle, pageWidth - 30);
    doc.text(splitTitle, 15, startY + 12);
  } else {
    const titleAlignCenter = pageWidth / 2 - doc.getTextWidth(fullTitle) / 2;
    doc.text(fullTitle, titleAlignCenter, startY + 12);
  }

  const tableHeaders = columns.map((d: { cname: any }) => d.cname);
  const tableData = filteredRows.map((item) => Object.values(item));

  // table start
  if (fullTitle.length > pageWidth) startY += 25;
  else startY += 20;
  doc.autoTable({
    head: [tableHeaders],
    headStyles: { fillColor: pdfStyle.THEME },
    body: tableData,
    styles: { fontSize: 6 },
    startY,
    // detect new page
    didDrawPage: function () {
      footer();
    },
  });

  const pdfData = doc.output("datauristring");

  return {
    downloadTitle: `${title} ${fromDt}-${toDt}-${data.orientation}.pdf`,
    blob: pdfData,
  };
};

export default exportToPdf;
